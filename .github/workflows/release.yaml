name: Release Workflow
run-name: ${{ (github.event.release.prerelease && 'Beta') || 'Prod'}} Release for ${{ github.repository }} - ${{ github.event.release.tag_name }}
on:
  release:
    # Triggered on Pre-Releases and Releases
    types: [released, prereleased]

# Only allow one release at the time
concurrency:
  group: deploy-${{ github.repository }}-release-${{ github.event.release.prerelease }}

jobs:
  define-environment:
    runs-on: ubuntu-latest
    if: (!github.event.release.draft)
    outputs:
      deployment_environment: ${{ steps.get-environment.outputs.deployment_environment }}
      deployment_longname: ${{ steps.get-environment.outputs.deployment_longname }}
      deployment_pypi_environment: ${{ steps.get-environment.outputs.deployment_pypi_environment }}
      deployment_url: ${{ steps.get-environment.outputs.deployment_url }}
    steps:
      - name: Configure Environment
        id: get-environment
        run: |
          wget -O /usr/local/bin/semver https://raw.githubusercontent.com/fsaintjacques/semver-tool/master/src/semver
          chmod +x /usr/local/bin/semver
          if [[ $(semver validate ${{ github.event.release.tag_name }}) == "invalid" ]]; then
            echo "::error title=Invalid Release::Release must be tagged with a valid SemVer version"
            exit 1
          fi
          if [[ "${{ github.event.release.prerelease }}" == "true" ]]; then
            echo "::notice title=Deployment Environment::Deployment for Test"
            echo "deployment_environment=-rc" >> $GITHUB_OUTPUT
            echo "deployment_longname=Beta" >> $GITHUB_OUTPUT
            echo "deployment_pypi_environment=test-pypi" >> $GITHUB_OUTPUT
            echo "deployment_url=https://test.pypi.org/p/pantos-client-cli" >> $GITHUB_OUTPUT
          else
            echo "::notice title=Deployment Environment::Deployment for Prod"
            echo "deployment_environment=" >> $GITHUB_OUTPUT
            echo "deployment_longname=Prod" >> $GITHUB_OUTPUT
            echo "deployment_pypi_environment=pypi" >> $GITHUB_OUTPUT
            echo "deployment_url=https://pypi.org/p/pantos-client-cli" >> $GITHUB_OUTPUT
          fi

  publish-docker:
    name: Publish docker image for ${{ needs.define-environment.outputs.deployment_longname }}
    needs: [define-environment]
    environment: 
      name: dockerhub
      url: ${{ steps.set-output-url.outputs.deployment_dockerhub_url }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.GH_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        id: buildx

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-v1.0-client-cli-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-v1.0-client-cli-

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        run: |
          docker buildx build \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache \
            --platform=linux/amd64,linux/arm64 \
            --build-arg version=${{ github.event.release.tag_name }} \
            --builder ${{ steps.buildx.outputs.name }} \
            --push \
            --tag pantosio/client-cli:latest${{ needs.define-environment.outputs.deployment_environment }} \
            --tag pantosio/client-cli:${{ github.event.release.tag_name }}${{ needs.define-environment.outputs.deployment_environment }} \
            .
      - name: Set output url
        id: set-output-url
        run: |
          echo "deployment_dockerhub_url=https://hub.docker.com/r/pantosio/client-cli/tags?name=${{ github.event.release.tag_name }}${{ needs.define-environment.outputs.deployment_environment }}" >> $GITHUB_OUTPUT

  publish-pypi:
    name: Publish to ${{ needs.define-environment.outputs.deployment_pypi_environment }}
    needs: [define-environment]
    runs-on: ubuntu-latest
    environment:
      name: ${{ needs.define-environment.outputs.deployment_pypi_environment }}
      url: ${{ needs.define-environment.outputs.deployment_url }}
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.GH_TOKEN }}

      - uses: pantos-io/ci-workflows/.github/actions/install-poetry@v1

      - name: Build package
        run: make wheel

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: client-cli
          path: dist

      - name: Publish package distributions to ${{ needs.define-environment.outputs.deployment_pypi_environment }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: ${{ needs.define-environment.outputs.deployment_pypi_environment == 'test-pypi' && 'https://test.pypi.org/legacy/' || 'https://upload.pypi.org/legacy/' }}

  snapshot:
    runs-on: ubuntu-latest
    if: (!github.event.release.prerelease)
    outputs:
      commit_hash: ${{ steps.push-snapshot.outputs.commit_hash }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Snapshot repo
        uses: actions/checkout@v3
        with:
          repository: pantos-io/client-cli
          path: ./client-cli
          token: ${{ secrets.GH_TOKEN }}
      - name: Copy files
        run: |
          if [ ! -d ./client-cli/pantos/ ]; then mkdir ./client-cli/pantos/; fi
          cp -R ./pantos/* ./client-cli/pantos/
          git submodule set-url submodules/common https://github.com/pantos-io/common.git
          git submodule set-url submodules/client-library https://github.com/pantos-io/client-library.git
          cp ./.coveragerc ./.gitignore ./.gitmodules ./.pre-commit-config.yaml Dockerfile ./client-cli.yml ./Makefile ./pantos-client.sh ./README.md ./LICENSE.md ./pyproject.toml ./poetry.lock ./CODE_OF_CONDUCT.md ./requirements.txt ./setup.py ./client-cli/
          mkdir -p ./client-cli/.github/ISSUE_TEMPLATE
          cp ./.github/ISSUE_TEMPLATE/ISSUE_REPORT.yml ./client-cli/.github/ISSUE_TEMPLATE/ISSUE_REPORT.yml
          cp ./client-cli.publish.env ./client-cli/client-cli.env
          if [ ! -L ./client-cli/.style.yapf ]; then ln -s submodules/common/.style.yapf ./client-cli/.style.yapf; fi
          if [ ! -L ./client-cli/.bandit ]; then ln -s submodules/common/.bandit ./client-cli/.bandit; fi
          if [ ! -L ./client-cli/client-library.yml ]; then ln -s submodules/client-library/client-library.yml ./client-cli/client-library.yml; fi
          if [ ! -L ./client-cli/client-library.env ]; then ln -s submodules/client-library/client-library.env ./client-cli/client-library.env; fi
          cd ./client-cli
          if [ ! -d ./submodules/common ]; then git submodule add https://github.com/pantos-io/common.git submodules/common; else git submodule update --remote; fi
          if [ ! -d submodules/client-library ]; then git submodule add https://github.com/pantos-io/client-library.git submodules/client-library; else git submodule update --remote; fi
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true
      - name: Push to snapshot repo
        id: push-snapshot
        run: |
          cd ./client-cli
          git config --global user.email "<>"
          git config --global user.name "Pantos Snapshoter"
          git add .
          git commit -m "Pushing a snapshot for $GITHUB_REF_NAME"
          git push --set-upstream origin main
          # Output the commit hash
          echo "commit_hash=$(git rev-parse HEAD) >> $GITHUB_OUTPUT"

  add-assets:
    name: Add Assets to the ${{ github.event.release.tag_name }} Release
    needs: publish-pypi
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: client-cli
          path: dist

      - name: List directory
        run: |
          cp dist/*.whl release/

      - uses: sigstore/gh-action-sigstore-python@v2.1.1
        with:
          inputs: release/*

      - uses: actions/upload-artifact@v4
        with:
          name: signed-client-cli
          path: release/*.whl

      - name: Upload release assets
        uses: svenstaro/upload-release-action@v2
        with:
          file: "./release/*"
          file_glob: true
          overwrite: true
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.event.release.tag_name }}

  propagate-public-release:
    name: Creates a public release and uploads assets as ${{ github.event.release.tag_name }}
    needs: [add-assets, snapshot]
    # Disable the job for the moment being
    runs-on: ubuntu-latest
    steps:
      - uses: robinraju/release-downloader@v1.9
        with:
          tag: ${{ github.event.release.tag_name }}
          tarBall: true
          zipBall: true
          fileName: "*"
          out-file-path: release
          preRelease: ${{ github.event.release.prerelease }}
          token: ${{ secrets.GH_TOKEN }}

      - name: List directory
        run: |
          ls -lha release

      - name: Create new Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "./release/*"
          prerelease: ${{ github.event.release.prerelease }}
          artifactErrorsFailBuild: true
          removeArtifacts: true
          allowUpdates: true
          body: ${{ github.event.release.body }}
          tag: ${{ github.event.release.tag_name }}
          commit: ${{ needs.snapshot.outputs.commit_hash }}
          token: ${{ secrets.GH_TOKEN }}
          owner: pantos-io
          repo: client-cli

      - uses: robinraju/release-downloader@v1.9
        with:
          tag: ${{ github.event.release.tag_name }}
          tarBall: true
          zipBall: true
          fileName: '*'
          out-file-path: external-release
          preRelease: ${{ github.event.release.prerelease }}
          token: ${{ secrets.GH_TOKEN }}
          repository: pantos-io/client-cli

      - name: List directory
        run: |
          ls -lha external-release
          # Remove all the files in external-release that are also present in release
          for file in $(ls release); do
            rm -f external-release/$file
          done

      - uses: sigstore/gh-action-sigstore-python@v2.1.1
        with:
          inputs: external-release/*

      - name: Upload signed source code
        uses: ncipollo/release-action@v1
        with:
          artifacts: "./external-release/*"
          artifactErrorsFailBuild: true
          allowUpdates: true
          tag: ${{ github.event.release.tag_name }}
          token: ${{ secrets.GH_TOKEN }}
          owner: pantos-io
          repo: client-cli
